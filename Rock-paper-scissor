<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Rock ‚Ä¢ Paper ‚Ä¢ Scissors ‚Äî Keyboard</title>
  <style>
  
    :root {
      --bg1: #0f1021;
      --bg2: #1b1c3a;
      --fg: #e6e7ff;
      --muted: #a6a7c9;
      --accent: #7c5cff;
      --win: #2dd4bf;
      --lose: #fb7185;
      --draw: #f59e0b;
      --card: #16172c;
      --shadow: 0 10px 30px rgba(0,0,0,.35);
      --radius: 18px;
    }

    * { box-sizing: border-box }
    html, body { height: 100% }
    body {
      margin: 0;
      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      color: var(--fg);
      background: radial-gradient(1000px 600px at 70% -10%, #2b2d6b33, transparent),
                  radial-gradient(900px 500px at -10% 80%, #7c5cff22, transparent),
                  linear-gradient(160deg, var(--bg1), var(--bg2));
      display: grid;
      place-items: center;
      padding: 24px;
    }

    .app {
      width: min(980px, 100%);
      background: linear-gradient(180deg, #1a1b33 0%, #141529 100%);
      border: 1px solid #ffffff0b;
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      overflow: clip;
    }

    header {
      padding: 22px 26px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px;
      background: linear-gradient(180deg, #1f2040, #171837);
      border-bottom: 1px solid #ffffff12;
    }
    header h1 {
      font-size: clamp(20px, 2.2vw, 30px);
      font-weight: 800;
      letter-spacing: .3px;
      margin: 0;
      display: flex; gap: 10px; align-items: center;
    }
    .badge { font-size: .7rem; padding: 6px 10px; border-radius: 999px; background: #ffffff14; color: var(--muted); border: 1px solid #ffffff1f; }

    main { padding: 26px; display: grid; gap: 22px; }

    
    .board {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      gap: 16px;
      align-items: stretch;
    }
    .card {
      background: var(--card);
      border: 1px solid #ffffff10;
      border-radius: var(--radius);
      padding: 18px;
      box-shadow: inset 0 1px 0 #ffffff08;
    }
    .score {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      gap: 14px;
      text-align: center;
    }
    .score .num { font-size: clamp(28px, 5vw, 44px); font-weight: 900; }
    .score .label { font-size: 12px; letter-spacing: .12em; text-transform: uppercase; color: var(--muted); }
    .divider { width: 1px; background: #ffffff12; }

    .status {
      display: grid; place-items: center; text-align: center; padding: 18px; border-radius: var(--radius);
      background: linear-gradient(180deg, #201f3b, #1b1b33);
      border: 1px dashed #ffffff24;
    }
    .status h2 { margin: 6px 0 4px; font-size: clamp(18px, 2.2vw, 24px) }
    .status p { margin: 0; color: var(--muted) }

    /* ===== Controls / Keys ===== */
    .controls { display: grid; grid-template-columns: 1fr 1fr; gap: 16px; }
    .keys { display: flex; align-items: center; gap: 10px; flex-wrap: wrap; color: var(--muted); }
    kbd {
      display: inline-grid; place-items: center;
      min-width: 34px; height: 34px; padding: 0 10px;
      border-radius: 10px; border: 1px solid #ffffff22; background: #0f1024;
      box-shadow: 0 2px 0 #00000066, inset 0 1px 0 #ffffff0a;
      font-weight: 700; letter-spacing: .5px; color: #cfd0ff;
    }
    .btns { display: flex; gap: 12px; justify-content: end; align-items: center; }
    .btn {
      border: 1px solid #ffffff22; background: #1c1d37; color: var(--fg);
      padding: 10px 14px; border-radius: 12px; font-weight: 700; cursor: pointer;
      transition: transform .08s ease, background .2s ease, border-color .2s ease; 
    }
    .btn:hover { transform: translateY(-1px); border-color: #ffffff44 }
    .btn:active { transform: translateY(1px) }
    .btn.primary { background: linear-gradient(180deg, #7c5cff, #5c47ff); border-color: #8e7aff; }

    .playzone { display: grid; grid-template-columns: 1.3fr .7fr; gap: 16px; }
    .choices { display: grid; grid-template-columns: repeat(3, 1fr); gap: 12px; }

    .chip {
      position: relative;
      display: grid; gap: 8px; place-items: center;
      border-radius: 16px; padding: 18px; min-height: 120px;
      border: 1px solid #ffffff12; background: #171733;
      transition: transform .15s ease, box-shadow .2s ease, border-color .2s ease;
      user-select: none;
    }
    .chip[data-key="R"] { outline: 2px solid #ffffff08; }
    .chip[data-key="P"] { outline: 2px solid #ffffff08; }
    .chip[data-key="S"] { outline: 2px solid #ffffff08; }
    .chip.active { transform: translateY(-4px) scale(1.02); box-shadow: 0 12px 30px #00000055; border-color: #ffffff33; }
    .emoji { font-size: 34px }
    .chip .title { font-weight: 800 }
    .chip .hint { color: var(--muted); font-size: 12px }

    .last { display: grid; gap: 8px; }
    .last .vs { display: grid; grid-template-columns: 1fr auto 1fr; gap: 12px; align-items: center; text-align: center; }
    .vs .who { background: #0f1028; border: 1px solid #ffffff12; border-radius: 12px; padding: 10px; }

    .banner { padding: 12px 14px; border-radius: 12px; text-align: center; font-weight: 800; letter-spacing: .3px; }
    .banner.win { background: #063e34; color: var(--win); border: 1px solid #2dd4bf55; box-shadow: 0 0 30px #2dd4bf22 inset; }
    .banner.lose { background: #3a0f17; color: #ffb4be; border: 1px solid #fb718555; box-shadow: 0 0 30px #fb718522 inset; }
    .banner.draw { background: #3b2a08; color: #ffd487; border: 1px solid #f59e0b55; box-shadow: 0 0 30px #f59e0b22 inset; }


    .history { display: grid; gap: 10px; }
    .history h3 { margin: 4px 0; font-size: 14px; color: var(--muted); letter-spacing: .18em; text-transform: uppercase; }
    .log { list-style: none; margin: 0; padding: 0; display: grid; gap: 8px; max-height: 210px; overflow: auto; }
    .log li { background: #0f1026; border: 1px solid #ffffff12; border-radius: 12px; padding: 10px 12px; display: flex; justify-content: space-between; align-items: center; gap: 10px; }
    .pill { font-size: 12px; padding: 4px 8px; border-radius: 999px; border: 1px solid #ffffff20; color: var(--muted); }

  
    @keyframes pop { 0%{ transform: scale(.9); } 60%{ transform: scale(1.06);} 100%{ transform: scale(1);} }
    .pop { animation: pop .25s ease-out; }

    @keyframes flash { 0%{ filter: brightness(1);} 50%{ filter: brightness(1.6);} 100%{ filter: brightness(1);} }
    .flash { animation: flash .35s ease-out; }

    @keyframes floaty { 0% { transform: translateY(0) } 50% { transform: translateY(-4px) } 100% { transform: translateY(0) } }
    .floaty { animation: floaty 3s ease-in-out infinite }

 
    footer { padding: 10px 20px 22px; color: var(--muted); display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 8px; }
    .help { display: flex; gap: 10px; align-items: center; }

    @media (max-width: 860px) {
      .board { grid-template-columns: 1fr; }
      .playzone { grid-template-columns: 1fr; }
      .controls { grid-template-columns: 1fr; }
      .btns { justify-content: start; }
    }
  </style>
</head>
<body>
  <div class="app" tabindex="0" id="app">
    <header>
      <h1>
        <span class="floaty">ü™®üìÑ‚úÇÔ∏è</span>
        Rock ‚Ä¢ Paper ‚Ä¢ Scissors
      </h1>
      <span class="badge">Keyboard Only: R / P / S</span>
    </header>

    <main>
      <section class="board card">
        <div class="score">
          <div>
            <div class="label">Player</div>
            <div class="num" id="pScore">0</div>
          </div>
          <div class="divider"></div>
          <div>
            <div class="label">Computer</div>
            <div class="num" id="cScore">0</div>
          </div>
        </div>

        <div class="status">
          <div id="banner" class="banner draw">Press R, P, or S to play</div>
          <h2 id="roundTitle">Best of ‚àû</h2>
          <p>First to 5 wins toggled with <kbd>B</kbd> ‚Ä¢ Reset with <kbd>Space</kbd></p>
        </div>
      </section>

      <section class="controls">
        <div class="card playzone">
          <div class="choices">
            <div class="chip" data-key="R">
              <div class="emoji">ü™®</div>
              <div class="title">Rock</div>
              <div class="hint">Press <kbd>R</kbd></div>
            </div>
            <div class="chip" data-key="P">
              <div class="emoji">üìÑ</div>
              <div class="title">Paper</div>
              <div class="hint">Press <kbd>P</kbd></div>
            </div>
            <div class="chip" data-key="S">
              <div class="emoji">‚úÇÔ∏è</div>
              <div class="title">Scissors</div>
              <div class="hint">Press <kbd>S</kbd></div>
            </div>
          </div>

          <div class="last">
            <div class="banner draw" id="lastResult">‚Äî</div>
            <div class="vs">
              <div class="who" id="pPick">ü§î</div>
              <div>vs</div>
              <div class="who" id="cPick">üíª</div>
            </div>
          </div>
        </div>

        <div class="card history">
          <h3>Round History</h3>
          <ul id="log" class="log" aria-live="polite"></ul>
          <div class="btns">
            <button class="btn" id="firstToBtn" title="Toggle Best-of">Toggle First to 5 (B)</button>
            <button class="btn primary" id="resetBtn" title="Reset (Space)">Reset (Space)</button>
          </div>
        </div>
      </section>
    </main>

    <footer>
      <div class="help">Play with <kbd>R</kbd> <kbd>P</kbd> <kbd>S</kbd>. Toggle first-to-5 with <kbd>B</kbd>. Reset with <kbd>Space</kbd>.</div>
      <div class="help">Made for keyboard ninjas ‚å®Ô∏è</div>
    </footer>
  </div>

  <script>
   
    const picks = {
      R: { name: 'Rock', emoji: 'ü™®' },
      P: { name: 'Paper', emoji: 'üìÑ' },
      S: { name: 'Scissors', emoji: '‚úÇÔ∏è' }
    };

    let player = 0, computer = 0, round = 0;
    let firstTo = Infinity; 

    
    const app = document.getElementById('app');
    const pScoreEl = document.getElementById('pScore');
    const cScoreEl = document.getElementById('cScore');
    const pPickEl  = document.getElementById('pPick');
    const cPickEl  = document.getElementById('cPick');
    const bannerEl = document.getElementById('banner');
    const lastEl   = document.getElementById('lastResult');
    const logEl    = document.getElementById('log');
    const resetBtn = document.getElementById('resetBtn');
    const ftBtn    = document.getElementById('firstToBtn');
    const roundTitle = document.getElementById('roundTitle');

    app.focus();
    app.addEventListener('click', () => app.focus());

    const computerPick = () => ['R','P','S'][Math.floor(Math.random()*3)];
    const outcome = (p, c) => (p===c? 'draw' : (p==='R'&&c==='S')||(p==='P'&&c==='R')||(p==='S'&&c==='P') ? 'win' : 'lose');

    function setBanner(state, text){
      bannerEl.className = `banner ${state}`;
      bannerEl.textContent = text;
      bannerEl.classList.add('flash');
      setTimeout(()=>bannerEl.classList.remove('flash'), 350);
    }

    function setLast(state, text){
      lastEl.className = `banner ${state}`;
      lastEl.textContent = text;
      lastEl.classList.add('pop');
      setTimeout(()=>lastEl.classList.remove('pop'), 250);
    }

    function updateScore(){
      pScoreEl.textContent = player; pScoreEl.classList.add('pop');
      cScoreEl.textContent = computer; cScoreEl.classList.add('pop');
      setTimeout(()=>{ pScoreEl.classList.remove('pop'); cScoreEl.classList.remove('pop'); }, 250);
    }

    function logRound(p, c, res){
      const li = document.createElement('li');
      li.innerHTML = `<span>#${++round} ‚Äî You: ${picks[p].emoji} ${picks[p].name} | CPU: ${picks[c].emoji} ${picks[c].name}</span>` +
                     `<span class="pill">${res.toUpperCase()}</span>`;
      logEl.prepend(li);
    }

    function setPickEl(target, key){
      target.textContent = `${picks[key].emoji} ${picks[key].name}`;
      target.classList.add('pop');
      setTimeout(()=>target.classList.remove('pop'), 250);
    }

    function flashChip(key){
      const el = document.querySelector(`.chip[data-key="${key}"]`);
      if(!el) return; el.classList.add('active');
      setTimeout(()=>el.classList.remove('active'), 180);
    }

    function maybeGameEnd(){
      if(firstTo === Infinity) return false;
      if(player >= firstTo || computer >= firstTo){
        const state = player > computer ? 'win' : (player < computer ? 'lose' : 'draw');
        setBanner(state, player>computer ? `You won the match ${player}‚Äì${computer}!` : player<computer ? `You lost the match ${player}‚Äì${computer}.` : `Match drawn ${player}‚Äì${computer}.`);
        return true;
      }
      return false;
    }

    function play(pKey){
      if(!['R','P','S'].includes(pKey)) return;
      
      if(firstTo !== Infinity && (player>=firstTo || computer>=firstTo)) return;

      flashChip(pKey);
      const cKey = computerPick();
      const res = outcome(pKey, cKey);

      setPickEl(pPickEl, pKey);
      setPickEl(cPickEl, cKey);

      if(res==='win') player++; else if(res==='lose') computer++;
      updateScore();
      logRound(pKey, cKey, res);

      setLast(res, res==='win' ? 'You win this round! üéâ' : res==='lose' ? 'You lose this round.' : 'It\'s a draw.');
      setBanner(res, res==='win' ? 'Nice! Keep going.' : res==='lose' ? 'Ouch! Try again.' : 'Neck and neck.');

      maybeGameEnd();
    }

    function reset(){
      player = computer = round = 0;
      updateScore();
      logEl.innerHTML = '';
      pPickEl.textContent = 'ü§î';
      cPickEl.textContent = 'üíª';
      setBanner('draw', 'Press R, P, or S to play');
      setLast('draw', '‚Äî');
    }

    function toggleFirstTo(){
      firstTo = firstTo === Infinity ? 5 : Infinity;
      roundTitle.textContent = firstTo === Infinity ? 'Best of ‚àû' : 'First to 5 Wins';
      setBanner('draw', firstTo === Infinity ? 'Free play mode enabled.' : 'Match mode: first to 5.');
    }


    document.addEventListener('keydown', (e) => {
      const k = e.key.toLowerCase();
      if(k === 'r') play('R');
      else if(k === 'p') play('P');
      else if(k === 's') play('S');
      else if(k === ' ') { e.preventDefault(); reset(); }
      else if(k === 'b') toggleFirstTo();
    });

    
    resetBtn.addEventListener('click', reset);
    ftBtn.addEventListener('click', toggleFirstTo);
  </script>
</body>
</html>
